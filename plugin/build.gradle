plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
}

def buildDir = "D:/Documents/Repositories/ARCore-GDExtension/plugin/build"

// TODO: Update value to your plugin's name.
def pluginName = "ARCoreGDExtension"

// TODO: Update value to match your plugin's package name.
def pluginPackageName = "org.godotengine.plugin.android.gdextension.arcore"

/**
 * Flag used to specify whether the `plugin.gdextension` config file has libraries for platforms
 * other than Android and can be used by the Godot Editor
 *
 * TODO: Update the flag value based on your plugin's configuration
 */
def gdextensionSupportsNonAndroidPlatforms = false

project.buildDir = './build'

android {
    namespace 'com.arcore'
    compileSdk 31

    defaultConfig {
        minSdk 31
        targetSdk 31
        versionCode 1
        versionName "1.0"
        setProperty("archivesBaseName", "${pluginName}-$versionName")

        ndk {
            abiFilters 'arm64-v8a'
        }

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags '-std=c++17'
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    // kotlinOptions {
    //     jvmTarget = '1.8'
    // }

    defaultConfig {
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++17", "-Wall"
            }
        }
    }
    externalNativeBuild {
        cmake {
            path file('src/main/cpp/CMakeLists.txt')
            
            version '3.22.1'
        }
    }
    buildFeatures {
        viewBinding true
    }
}

// Define arcore_libpath variable
def arcore_libpath = file("${buildDir}/arcore-native")

dependencies {
    // ARCore dependency
    implementation 'com.google.ar:core:1.31.0' // Update with the latest version
    
    // Define a configuration for ARCore implementation
    configurations {
        arcoreImplementation
    }
    
    // Map ARCore dependency to the new configuration
    arcoreImplementation 'com.google.ar:core:1.31.0'
}

// Task to extract .so files from ARCore AAR
task extractNativeLibs(type: Copy) {
    dependsOn configurations.arcoreImplementation

    from { configurations.arcoreImplementation.collect { zipTree(it) } }
    into arcore_libpath
}

// Hook extractNativeLibs task to the build process
preBuild.dependsOn(extractNativeLibs)

// BUILD TASKS DEFINITION
task cleanAssetsAddons(type: Copy) {
    doLast {
        delete("src/main/assets/addons")
    }
}

task copyExportScriptsTemplate(type: Copy) {
    description = "Copies the export scripts templates to the plugin's addons directory"
    dependsOn(cleanAssetsAddons)

    from("export_scripts_template")
    into("src/main/assets/addons/" + pluginName)
}

task copyDebugAARToAddons(type: Copy) {
    description = "Copies the generated debug AAR binary to the plugin's addons directory"

    from("${buildDir}/outputs/aar") {
        include("${pluginName}-$project.android.defaultConfig.versionName-debug.aar")
    }
    into("src/main/assets/addons/" + pluginName + "/.bin/debug/arm64-v8a/")
}

task copyReleaseAARToAddons(type: Copy) {
    description = "Copies the generated release AAR binary to the plugin's addons directory"

    from("${buildDir}/outputs/aar") {
        include("${pluginName}-$project.android.defaultConfig.versionName-release.aar")
    }
    into("src/main/assets/addons/" + pluginName + "/.bin/release/arm64-v8a/")
}

task copyDebugSharedLibs(type: Copy) {
    description = "Copies the generated debug .so shared library to the plugin's addons directory"
    includeEmptyDirs = true

    from("${buildDir}/output_libs/arm64-v8a") {
        include("lib${pluginName}d.so")
    }
    into("src/main/assets/addons/" + pluginName + "/.bin/debug/arm64-v8a")
}

task copyReleaseSharedLibs(type: Copy) {
    description = "Copies the generated release .so shared library to the plugin's addons directory"
    includeEmptyDirs = true

    from("${buildDir}/output_libs/arm64-v8a") {
        include("lib${pluginName}.so")
    }
    into("src/main/assets/addons/" + pluginName + "/.bin/release/arm64-v8a")
}

task cleanDemoAddons(type: Delete) {
    doLast {
        delete("demo/addons/" + pluginName)
    }
}

task copyAddonsToDemo(type: Copy) {
    description = "Copies the plugin's output artifact to the output directory"
    dependsOn(cleanDemoAddons, copyDebugAARToAddons, copyReleaseAARToAddons, copyDebugSharedLibs, copyReleaseSharedLibs)

    from("src/main/assets/addons/" + pluginName) {
        if (!gdextensionSupportsNonAndroidPlatforms) {
            exclude("plugin.gdextension")
        }
    }
    into("demo/addons/" + pluginName)
}

task printSoFiles {
    doLast {
        println "Generated .so files:"
        buildDir.eachFile { file ->
            if (file.name.endsWith('.so')) {
                println "- ${file.name}: ${file.absolutePath}"
            }
        }
    }
}

preBuild.dependsOn(copyExportScriptsTemplate)

assemble.dependsOn(copyExportScriptsTemplate)
assemble.finalizedBy(copyAddonsToDemo)

clean.dependsOn(cleanDemoAddons, cleanAssetsAddons)
